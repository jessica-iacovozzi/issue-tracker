// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(255)
  issues    Issue[]
  managerId String  @db.VarChar(255)
  manager   User    @relation(fields: [managerId], references: [id])
}

model Issue {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  status      Status   @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   Int      @default(autoincrement())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  images      String[] @default([])
  creatorId   String   @db.VarChar(255)
  creator     User     @relation(name: "CreatedIssues", fields: [creatorId], references: [id])
  assigneeId  String?  @db.VarChar(255)
  assignee    User?    @relation(name: "AssignedIssues", fields: [assigneeId], references: [id])
}

enum Status {
  OPEN
  ONGOING
  CLOSED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedIssues Issue[]   @relation(name: "AssignedIssues")
  createdIssues  Issue[]   @relation(name: "CreatedIssues")
  projects       Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
